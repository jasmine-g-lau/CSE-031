TPS1
1. Once fib.s is assembled, open the
Execute tab (it should be opened by default after assembled). Two
segments of memory are displayed here: Text Segment and Data Segment. What are the starting
addresses of Text Segment and Data Segment? Give your answers in Hex format.
    text segment 0x00400000
    data segment 0x10010000

2. The Text Segment shows you how each actual machine code is stored in the memory (again it is
simulated) and its corresponding MIPS code. Two types of MIPS code are shown here: Basic and Source.
We call the Basic one True Assembly Language, and the Source one MIPS Assembly Language.
From the display, what can you tell about the difference between the two in terms of their relationship
with the machine code? We will cove this topic in future lectures.
    difference: basic true assembly language = directly corresponds to machine code instructions
    source mips assembly language = more human readable representation of assembly code, translated into machine code

3. Now, let us take a look at the Data Segment. How much difference in bytes are there between 2 address
locations (again, the addresses are in Hex)?
    0x003F0000

4. For each address location, how many columns are there?
    8 columns: Value(+0), Value(+4), Value(+8), Value(+c), Value(+10), Value(+14), Value(+18), Value(+1c)

5. What can you tell about the relationship between the address difference and the number of columns at
each address location?
    Value(+0), Value(+4), Value(+8), Value(+c), Value(+10), Value(+14), Value(+18), Value(+1c)
    13, 20, 1869357129, 1126196598, 835443667, 33, 0, 0
    ea address aligned to hold 4 32-bit words
    holds 4 values, ea take 4 bytes (total 16 bytes per address)

6. From the source code, how do you create a new variable/label named m and set it to 20?
    m: .word 20

7. Save and assemble your file. At what address is the value of m stored?
    value 'm' stored at address following address 'n' stored
    'n' = 0x10010000, 'm' = 0x10010004

8. Besides numbers, we can also initialize strings for the program to use. Search from the Internet on how
to declare a string named str1 and set it to “I love CSE31!”
str1: .asciiz "I love CSE31!"

9. Insert the declaration of str1 in your code and assemble it. From the Data Segment, we can see that
the string is occupying 3 address locations. At what addresses is str1 stored?
    'str1' = 0x10010008

10. str1 is stored as numerical values in the memory. Check the
ASCII box and observe how it is stored.
Does the display of characters agree with what you have learned from Lab 04 about how an array of
characters is stored?
    agrees with way array of characters stored in memory

11. In order to print str1, we will need to use syscall function. Search the Internet to find out how to
print str1.
    print string using syscall with 4, pass address of string in $a0
    li $v0, 4
    la $a0, str1
    syscall
    

12. Now let us go back to the program. Search from the Internet to find out what “la $t3, n” does.
What will be the value stored in $t3 after running this instruction? From this we can see that we cannot
use the initialized variables (labels) directly in our MIPS program. We need to use la, then lw to save
the value into a register
    la $t3, n 
    "la" = load address (loads address of variable n into register $t3)
    "lw" = load word (access value stored in 'n')


TPS2
1. From lectures, we have learned that we can perform different inequality comparisons (<, >, <=, >=) by
using only slt, beq, and bne instructions. Why not having one instruction for each inequality in
MIPS?


2. Declare a new variable/label (n) and set it to 25.


3. Insert instructions to declare the following strings:
a. str1: "Less than\n"
b. str2: "Less than or equal to\n"
c. str3: "Greater than\n"
d. str4: "Greater than or equal to\n"


4. Insert instructions to read in an integer from users. Search from the Internet on how to use syscall to
do it.


5. Insert code so the program will compare if the user input is less than n. If it is, output “Less than”.


6. Insert code so the program will compare if the user input is greater than or equal to n. If it is, output
“Greater than or equal to”.


7. Now comment out your code from steps 5 and 6. Insert code so the program will compare if the user
input is greater than n. If it is, output “Greater than”.


8. Insert code so the program will compare if the user input is less than or equal to n. If it is, output “Less
than or equal to”.