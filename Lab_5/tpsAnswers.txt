TPS1
1. Before we use a new tool, we will need to find out how to use it. MARS DOES NOT mean that MIPS
is an alien language (well, sort of). Work with your partner and find out what MARS stands for.
    MIPS Assembler and Runtime Simulator

2. Since you have found out what MARS stands for, you probably have found out the webpage of MARS
as well. Visit the download page and download MARS in your computer. To run MARS, just double-
click the downloaded
jar file. You will need Java to run it. Note: MARS is not pre-installed in the lab
computers, so you need to download it if you are using a lab computer. But before running the jar file
you will have to mark the file as user-executable. To do this, navigate to the folder where you have
downloaded the jar file and run the command chmod u+x Mars4_5.jar. After this, you may
double-click the jar file to run it.

3. From the Tutorial materials page (you can find the link to it from the home page), save both tutorial
materials (
MARS feature map and
MARS tutorial) as well as Fibonacci.asm

4. Download and save myFirstExample.s from the assignment page in your Lab_5 folder (both .asm
and .s file extensions are equivalent).

5. Follow Part 1 : Basic MARS Use in the tutorial using Fibonacci.asm and discuss the following
questions:
a. How do you load an assembly file?
    "File", "Open" or Ctrl + O
b. How do you assemble (compile) the program?
    "Execute" or F3
c. How do you run the assembled program?
    "Run I/O" or F5
d. Can you run a program before assembling it?
    No, Running involes translating the assembly code into machine code, which is done during assembly
e. If you want to run the assembled program line by line, how to do it?
    "Tools", "Bit/Word/Address", "Assemble all, but do not simulate", "Step" or F10
f. How do you run the program again after it has finished running?
    "Run" or F5

6. Now load, understand, discuss, and run myFirstExample.s

TPS2
1. What do the .data, .word, .text directives mean (i.e., what do you put in each section)?
    .data: beginning of data section (declare/initialize data variables)
    ,word: resernve space in memory for word and initialize with specified value
    .text: beginning of text section (program instructions)

2. What does line 10 do?
    la $t3, n
    loads address "n" into register "$t3" (not value)

3. What does line 15 do?
    lw $t3, 0($t3)
    loads value of "n"
    loads value stored at memory address pointed to by "$t3" (address of "n") to register "$t3"

4. How do you set a breakpoint in MARS? Set breakpoint on line 15 and list the steps of achieving this.
    click on line number in left margin of text editor (red dot)

5. After your program stops because of a breakpoint, how do you continue to execute your code? How do
you step through your code?
    execution through breakpoint: "Run" or F5
    step through code line by line: "Step" or F10

6. How can you find out the content of a register? How do you modify the value of a register manually
while running the program?
    content of register: "Registers" window
    modify value of register: double click value in "Registers" window, enter new value, Enter

7. At what address is n stored in memory? Calculate the 13th fib number by modifying this memory
location.
    address of "n" = stored in register "$t3" 

8. Line 19 and 21 use the syscall instruction. What is it and how do you use it?
    line 19: set syscall service number to 1 print integer
    line 21: sets syscall service number 10 exit program
    syscall = introduction in MIPS invoking operating system service (system call)